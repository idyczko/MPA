include("plots");
include("permutations_helper");

using Permutations;
using PermutationsHelper;
using Plots;

Markov_a = 2; #Coefficient a (will be multiplied by expected value)
Chebyshev_a = 2; #Coefficient a (will be multiplied by standard deviation)

attempts=200;
V=[200:200:4000]; #input data size range
VF=[p->length(fixed_points(p)), p->length(find([length(cycles(p)[x])>1 for x = 1:length(cycles(p))])), PermutationsHelper.records, p->length(longest_increasing(p))]; #random variables to be analysed
F=[mean, var, maximum, minimum]; #functions for random variable analysis
RESULTS_PROCESSED = zeros(length(VF), length(V), length(F)); #processed results after applying functions from F array
RESULTS_ALL = zeros(length(VF), length(V), attempts); #all partial results

for v in eachindex(V)
  print(string(V[v])*" start");
  for a = 1:attempts
    p = RandomPermutation(V[v]);
    for vf in eachindex(VF)
      RESULTS_ALL[vf, v, a]=VF[vf](p);
    end;
  end;
  for vf in eachindex(VF)
    for f in eachindex(F)
      RESULTS_PROCESSED[vf,v,f]=F[f](RESULTS_ALL[vf,v,:]);
    end;
  end;
end;

Plots.display_plots(V, F, VF, RESULTS_PROCESSED, RESULTS_ALL, Markov_a, Chebyshev_a);
